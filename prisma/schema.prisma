// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  clientes     Cliente[] 
  accounts      Account[]
  sessions      Session[]
}

model Cliente {
  id Int    @id @default(autoincrement())
  nome       String @db.VarChar(100)
  email      String @unique @db.VarChar(100)
  telefone   String @db.VarChar(20)
  user_id   Int
  user      User   @relation(fields: [user_id], references: [id])
  pets       Pet[]
}

model Pet {
  id      Int      @id @default(autoincrement())
  nome        String   @db.VarChar(100)
  sexo        String   @default("Indefinido") @db.VarChar(10)
  raca_pet    String   @db.VarChar(50)
  observacoes String?  @db.Text
  id_cliente  Int
  cliente     Cliente  @relation(fields: [id_cliente], references: [id])
  agendamentos Agendamento[]
}


model Baia {
  id       Int             @id @default(autoincrement())
  descricao     String          @db.VarChar(255)
  status        String          @default("Livre") @db.VarChar(20)
  agendamentos Agendamento[]
}

model Agendamento {
  id    Int      @id @default(autoincrement())
  id_pet           Int
  id_disponibilidade Int
  id_Baia         Int
  data_hora_inicio   DateTime
  data_hora_fim      DateTime
  valor           Decimal
  forma_pagamento String   @default("NÃ£o Informado") @db.VarChar(50)
  status_pagamento String  @default("Pendente") @db.VarChar(20)
  data_agendamento DateTime
  baia          Baia      @relation(fields: [id_Baia], references: [id])
  pet             Pet      @relation(fields: [id_pet], references: [id])
}

// Tabelas padroes do NEXT AUTH
model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
